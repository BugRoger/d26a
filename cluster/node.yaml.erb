#cloud-config

write_files:
  - path: /opt/bin/format_volume.sh
    owner: root
    content: |
      #!/usr/bin/bash
      until [ -e $1 ]; do sleep 1; done
      blkid $1 || ( wipefs -f $1; mkfs.ext4 $1 -I 128 -i 4096 -b 4096 )

  - path: /etc/conf.d/nfs
    permissions: '0644'
    content: |
      OPTS_RPC_MOUNTD=""
      
  - path: /etc/kubernetes/kubeconfig
    owner: root
    content: |
      apiVersion: v1
      kind: Config
      clusters:
        - name: local
          cluster:
             certificate-authority: /etc/kubernetes/ca.pem
             server: "https://<%= ENV["KUBERNETES_MASTER"] %>:6443"
      contexts:
        - name: local 
          context:
            cluster: local
            user: local 
      current-context: local
      users:
        - name: local
          user:
            client-certificate: /etc/kubernetes/client.pem
            client-key: /etc/kubernetes/client-key.pem

  - path: /etc/kubernetes/.aws/credentials
    owner: root
    content: |
      AWS_ACCESS_KEY_ID=<%= ENV["AWS_ACCESS_KEY_ID"] %>
      AWS_SECRET_ACCESS_KEY=<%= ENV["AWS_SECRET_ACCESS_KEY"] %>

  - path: /etc/kubernetes/.aws/config
    owner: root
    content: |
      [global]
      zone = <%= ENV["AWS_ZONE"] %>
      region = <%= ENV["AWS_REGION"] %>
      endpoint = <%= ENV["AWS_ENDPOINT"] %>

coreos:
  fleet:
    etcd-servers: http://<%= ENV["KUBERNETES_MASTER"] %>:2379
    metadata: "role=node"

  units:
    - name: monsoon-iptables.timer
      mask: true

    - name: monsoon-iptables.service
      mask: true

    - name: etcd.service
      mask: true

    - name: rpc-statd.service
      command: start
      enable: true

    - name: format-volume@.service
      content: |
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=/usr/bin/chmod +x /opt/bin/format_volume.sh
        ExecStart=/usr/bin/bash /opt/bin/format_volume.sh %f 

    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Requires=format-volume@dev-sdf.service early-docker.service
        After=format-volume@dev-sdf.service early-docker.service
        Before=early-docker.target
        [Mount]
        What=/dev/sdf
        Where=/var/lib/docker
        Type=ext4

    - name: var-lib-kubelet.mount
      command: start
      content: |
        [Unit]
        Requires=format-volume@dev-sdg.service early-docker.service
        After=format-volume@dev-sdg.service early-docker.service
        Before=early-docker.target
        [Mount]
        What=/dev/sdg
        Where=/var/lib/kubelet
        Type=ext4

    - name: fleet.service
      command: start

    - name: setup-network-environment.service
      command: start
      content: |
        [Unit]
        Description=Setup Network Environment
        Documentation=https://github.com/kelseyhightower/setup-network-environment
        Requires=network-online.target
        After=network-online.target

        [Service]
        EnvironmentFile=/etc/environment
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/wget -P /opt/bin https://github.com/kelseyhightower/setup-network-environment/releases/download/v1.0.0/setup-network-environment
        ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
        ExecStart=/opt/bin/setup-network-environment
        RemainAfterExit=yes
        Type=oneshot

    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Service]
            ExecStart=
            ExecStart=/usr/libexec/sdnotify-proxy /run/flannel/sd.sock \
                /usr/bin/docker run --net=host --privileged=true --rm \
                    --volume=/run/flannel:/run/flannel \
                    --env=NOTIFY_SOCKET=/run/flannel/sd.sock \
                    --env-file=/run/flannel/options.env \
                    --volume=${ETCD_SSL_DIR}:/etc/ssl/etcd:ro \
                    quay.io/coreos/flannel:${FLANNEL_VER} /opt/bin/flanneld --etcd-endpoints http://<%= ENV["KUBERNETES_MASTER"] %>:2379 --ip-masq=true

    - name: docker.service
      command: start
      drop-ins:
        - name: 51-docker-mirror.conf
          content: |
            [Unit]
            # making sure that flanneld finished startup, otherwise containers
            # won't land in flannel's network...
            Requires=flanneld.service
            After=flanneld.service
            [Service]
            Environment=DOCKER_OPTS='--registry-mirror=http://<%= ENV["KUBERNETES_MASTER"] %>:5000'

    - name: kubernetes-download@.service
      content: |
        [Service]
        AssertFileIsExecutable=/opt/bin/%i
        EnvironmentFile=/etc/environment
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStart=/bin/bash -c "wget -N -P /opt/bin https://github.wdf.sap.corp/monsoon/monsoon-kube/releases/download/v<%= ENV["KUBERNETES_VERSION"] %>/%i && chmod +x /opt/bin/%i"
        Type=oneshot
        RemainAfterExit=yes 

    - name: kube-sidecar@.service
      content: |
        [Unit]
        Description=Kubernetes Sidecar Service
        Requires=setup-network-environment.service
        After=setup-network-environment.service

        [Service]
        EnvironmentFile=/etc/environment
        EnvironmentFile=/etc/network-environment
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
        ExecStart=/usr/bin/wget -O /etc/kubernetes/manifests/%i https://github.wdf.sap.corp/monsoon/monsoon-kube/raw/master/manifests/%i 
        RemainAfterExit=yes
        Type=oneshot

    - name: kube-certs.service
      command: start
      content: |
        [Unit]
        Description=Generate Kubernetes Client/Kubelet Certificates
        Requires=network-online.target
        After=network-online.target

        [Service]
        Type=oneshot
        RemainAfterExit=true
        EnvironmentFile=/etc/environment
        EnvironmentFile=/etc/network-environment
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes
        ExecStartPre=/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://github.wdf.sap.corp/monsoon/monsoon-kube/raw/master/scripts/make-certs
        ExecStartPre=/usr/bin/chmod +x /opt/bin/make-certs
        ExecStart=/opt/bin/make-certs -r <%= ENV["KUBERNETES_MASTER"] %>:8888 \
            -t <%= ENV["KUBERNETES_CA_TOKEN"] %> \
            -c ${DEFAULT_IPV4}@<%= ENV["KUBERNETES_PUBLIC_HOST"] %> \
            -s ${DEFAULT_IPV4} 

    - name: kube-proxy.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Proxy
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=setup-network-environment.service kubernetes-download@kube-proxy.service kube-certs.service
        After=setup-network-environment.service kubernetes-download@kube-proxy.service kube-certs.service

        [Service]
        ExecStart=/opt/bin/kube-proxy \
            --kubeconfig=/etc/kubernetes/kubeconfig \
            --logtostderr=true
        Restart=always
        RestartSec=10
        LimitNOFILE=65536

    - name: kubelet.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Kubelet
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=setup-network-environment.service kubernetes-download@kubelet.service kube-sidecar@fluentd.service kube-certs.service
        After=setup-network-environment.service kubernetes-download@kubelet.service kube-sidecar@fluentd.service kube-certs.service

        [Service]
        EnvironmentFile=/etc/network-environment
        EnvironmentFile=/etc/kubernetes/.aws/credentials
        ExecStart=/opt/bin/kubelet \
        --address=0.0.0.0 \
        --port=10250 \
        --tls-private-key-file=/etc/kubernetes/server-key.pem \
        --tls-cert-file=/etc/kubernetes/server.pem \
        --hostname_override=${DEFAULT_IPV4} \
        --api-servers=https://<%= ENV["KUBERNETES_MASTER"] %>:6443 \
        --kubeconfig=/etc/kubernetes/kubeconfig \
        --cluster-dns=172.16.254.254 \
        --cluster-domain=cluster.local \
        --cloud-provider=aws \
        --cloud-config=/etc/kubernetes/.aws/config \
        --config=/etc/kubernetes/manifests \
        --logtostderr=true
        Restart=always
        RestartSec=10
